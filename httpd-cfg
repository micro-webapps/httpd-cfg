#!/usr/bin/env python
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Jan Kaluza <jkaluza at redhat dot com>
# Description: Converts webserver configuration from webconfig-spec JSON
# format to native Apache httpd configuration format.

from __future__ import print_function
from urlparse import urlparse
import sys
import json
import os
import uuid
import collections

listen_9090_set = False
listen_9443_set = False

def print_help():
    print("Usage:", sys.argv[0], "<input_directory_with_json_files> <output_directory>")

# Loads the config "c" and store it to internal configs storage "cfgs".
def load_config(cfgs, c):
    # The configs stored in Kubernetes/Openshift API-server can have their IDs.
    # We use the ID here as a name of the web application configured by the
    # config, so later when generating the httpd config, we can name it
    # according to web application configured by the config.
    if "id" in c:
        name = c["id"]
        name = name.replace("-","_")
    else:
        name = str(uuid.uuid1())

    # In case the ID is not unique and the config with this ID has been
    # already loaded, append UUID to it.
    if name in cfgs:
        name += str(uuid.uuid1())

    # For now we support also loading from "webconfig".
    # FIXME: This is not according to webconfig-spec. Micro-webapps confd.py has
    # to be fixed before removing this.
    if "webconfig" in c:
        cfgs[name] = c["webconfig"]
    else:
        cfgs[name] = c

    return cfgs

# Replaces %X% with value of X environment variable.
# Replaces %THIS_X% with value of app_name_X environment variable.
# FIXME: ^ Is this realy needed or beneficial?
def expand_variables(line, app_name):
    if line.startswith("%") and line.endswith("%"):
        env = line[1:-1]
        if env.startswith("THIS_"):
            env = env.replace("THIS_", app_name.upper() + "_")
        return os.getenv(env, "")

    ret = ""
    lst = line.split("%")
    for part in lst:
        env = part
        if env.startswith("THIS_"):
            env = env.replace("THIS_", app_name.upper() + "_")
        val = os.getenv(env, False)
        if val == False:
            ret += part + "%"
        else:
            ret = ret[:-1]
            ret += val
    return ret[:-1] # remove last %

# Returns two objects from "cfgs":
# - webapps_per_vhost - {vhost1:[app1_cfg, app2_cfg, ...], ...}
# - webapps_without_vhost - [app1_cfg, app2_cfg, ...]
def get_webapps_per_vhost(cfgs):
    webapps_per_vhost = {}
    webapps_without_vhost = []
    for app, app_cfg in cfgs.items():
        # We would loose the app name, so store it under __name__ key.
        # FIXME: Maybe in the future we could create App class here.
        app_cfg["__name__"] = app
        if "virtualhost" in app_cfg:
            # virtualhost can contain variable, so at first try to expand it.
            # If it's empty after the expansion, append it to
            # webapp_without_vhost list.
            vhost = expand_variables(app_cfg["virtualhost"], app)
            if len(vhost) == 0:
                webapps_without_vhost.append(app_cfg)
            else:
                if not vhost in webapps_per_vhost:
                    webapps_per_vhost[vhost] = []
                webapps_per_vhost[vhost].append(app_cfg)
        else:
            webapps_without_vhost.append(app_cfg)
    
    return webapps_per_vhost, webapps_without_vhost

class HTTPDProxyGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "proxy"

    # Returns address of proxy in scheme://address:port format.
    # Returns None if the address cannot be obtained or is not set
    # in the proxy_cfg.
    def get_address(self, proxy_cfg):
        ret = ""

        if "url" in proxy_cfg["proxy"]:
            url = urlparse(proxy_cfg["proxy"]["url"])

            ret = expand_variables(url.scheme, self.p.app_name)
            if len(ret) == 0:
                ret = "http://"
            else:
                ret += "://"

            hostname = url.hostname
            port = url.port

            # We must not replace the name of balancer with hostname from env.
            if url.scheme == "balancer":
                ret += hostname
                if port:
                    ret += ":" + str(port)
                return ret
        else:
            return None

        # For Kubernetes/Openshift, we allow getting the address and port of
        # the backend from the APP_NAME_PORT environment variable.
        address_env = self.p.app_name.upper() + "_PORT"
        address = os.getenv(address_env, False)
        if address:
            url = urlparse(address)
            # If we are running in Kubernetes/Openshift, use the IP address,
            # because it's static per service. Otherwise use the hostname
            # (app_name) and port from _PORT.
            if os.getenv("KUBERNETES_SERVICE_PORT", False) != False:
                ret += url.netloc
            else:
                ret += self.p.app_name + ":" + str(url.port)
        else:
            # The APP_NAME_PORT variable is not set, so fallback to
            # proxy_hostname and proxy_port.
            ret += hostname
            if port:
                ret += ":" + str(port)

        return ret

    def write_proxypass(self, proxy_cfg):
        if self.p.nested_sections[0] == "virtualhost":
            self.p.write("ProxyRequests off")
            self.p.write("ProxyPreserveHost on")

        backend_address = self.get_address(proxy_cfg)
        if not backend_address:
            return

        parsed = urlparse(backend_address)
        backend_url = parsed.scheme + "://" + self.p.vhost_name

        # Get proxy_backend_alias or set it to "/" if not set.
        if "url" in proxy_cfg["proxy"]:
            url = urlparse(proxy_cfg["proxy"]["url"])
            proxy_backend_alias = url.path
        else:
            return
    
        if len(expand_variables(proxy_backend_alias, self.p.app_name)) != 0:
            proxy_backend_alias = expand_variables(proxy_backend_alias, self.p.app_name)
        else:
            proxy_backend_alias = "/"
            
        backend_url += proxy_backend_alias
        backend_address += proxy_backend_alias

        # Get frontend URL or set it to "/" if not set.
        if "alias" in proxy_cfg["proxy"]:
            frontend_url = expand_variables(proxy_cfg["proxy"]["alias"], self.p.app_name)
            if len(frontend_url) == 0:
                frontend_url = "/"
        else:
            frontend_url = "/"

        if backend_url[-1] != "/":
            backend_url += "/"

        # In case of __regex__" in the proxy_cfg, we are parsing Match
        # directive. That means we have to use ProxyPassMatch instead
        # of ProxyPass.
        if "__regex__" in proxy_cfg:
            # If we are in "location" section, omit the frontend_url arg,
            # because it's already generated by HTTPDLocationsGenerator
            # in Location definition.
            if "location" in self.p.nested_sections:
                self.p.write("ProxyPassMatch {0}", backend_address)
                if parsed.scheme in ["http", "https"]:
                    self.p.write("ProxyPassReverse {0}", backend_url)
            else:
                if 020/webconf.jsonfrontend_url[-1] != "/":
                    frontend_url += "/"
                self.p.write("ProxyPassMatch ^{0}(.*{1}) {2}", frontend_url, proxy_cfg["__regex__"][:-1], backend_address)
                if parsed.scheme in ["http", "https"]:
                    self.p.write("ProxyPassReverse {0} {1}", frontend_url, backend_url)
        else:
            if "location" in self.p.nested_sections:
                self.p.write("ProxyPass {0}", backend_address)
                if parsed.scheme in ["http", "https"]:
                    self.p.write("ProxyPassReverse {0}", backend_url)
            else:
                self.p.write("ProxyPass {0} {1}", frontend_url, backend_address)
                # ProxyPassReverse should end with '/', otherwise the Location rewrite
                # won't work correctly.
                if frontend_url[-1] != "/":
                    frontend_url += "/"
                if parsed.scheme in ["http", "https"]:
                    self.p.write("ProxyPassReverse {0} {1}", frontend_url, backend_url)

    def write_sethandler(self, proxy_cfg):
        address = self.get_address(proxy_cfg)
        if address:
            self.p.write("SetHandler \"proxy:{0}\"", address)

    def handle(self, proxy_cfg):
        if not "proxy" in proxy_cfg:
            return True

        if ("match" in self.p.nested_sections):
            return True

        if ("virtualhost" in self.p.nested_sections
            or "location" in self.p.nested_sections
            or "alias" in proxy_cfg["proxy"]
            or "backend_alias" in proxy_cfg["proxy"]):
            self.write_proxypass(proxy_cfg)
        else:
            self.write_sethandler(proxy_cfg)
        return True

class HTTPDAllowGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "allow"

    def handle(self, cfg):
        if not "allow" in cfg:
            return True

        allow = cfg["allow"]
        if allow == "all":
            self.p.write("Order Deny,Allow")
            self.p.write("Allow from all")
        elif allow == "local":
            self.p.write("Require local")
        else:
            self.p.write("Order Deny,Allow")
            self.p.write("Deny from all")
        return True

class HTTPDRedirectsGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "redirects"

    def handle(self, cfg):
        if not "redirects" in cfg:
            return True

        for frm, redirect in cfg["redirects"].items():
            if redirect["to"][-1] != "/":
                redirect["to"] += "/"
            self.p.write("Redirect {0} {1}", frm, redirect["to"])
        return True

class HTTPDBalancersGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "balancers"

    def write_balancer(self, name, cfg):
        if not "members" in cfg:
            return True
        if not "method" in cfg:
            cfg["method"] = "round-robin"

        generate_route =  False
        stickysession = None
        if "persistence" in cfg and "method" in cfg["persistence"] and cfg["persistence"]["method"] != "none":
            if cfg["persistence"]["method"] == "generate_cookie":
                self.p.write("Header add Set-Cookie \"{0}=.%{{BALANCER_WORKER_ROUTE}}e; path=/\" env=BALANCER_ROUTE_CHANGED", cfg["persistence"]["cookie_name"])
                generate_route = True
            if "cookie_name" in cfg["persistence"]:
                stickysession = cfg["persistence"]["cookie_name"]
            if "url_id" in cfg["persistence"]:
                stickysession += "|" + cfg["persistence"]["url_id"]

        self.p.write("<Proxy \"balancer://{0}\">", name)
        self.p.nested_sections.insert(0, "balancer")

        i = 0
        for member in cfg["members"]:
            args = ""
            if "weight" in member:
                args += " loadfactor=" + str(member["weight"])
            if generate_route:
                if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                    args += " route=node" + str(i)
                    i += 1
                else:
                    args += " route=" + str(uuid.uuid1())

            self.p.write("BalancerMember \"{0}\"{1}", member["url"], args)

        if cfg["method"] == "round-robin":
            self.p.write("ProxySet lbmethod=byrequests")
        elif cfg["method"] == "least-connected":
            self.p.write("ProxySet lbmethod=bybusyness")

        if stickysession:
            self.p.write("ProxySet stickysession={0}", stickysession)

        self.p.nested_sections.pop(0)
        self.p.write("</Proxy>")
        self.p.write("")

    def handle(self, cfg):
        if not "balancers" in cfg:
            return True

        for name, balancer in cfg["balancers"].items():
            self.write_balancer(name, balancer)

        return True

class HTTPDErrorPagesGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "error_pages"

    def handle(self, cfg):
        if not "error_pages" in cfg:
            return True

        for code, path in cfg["error_pages"].items():
            self.p.write("ErrorDocument {0} \"{1}\"", code, path)

        return True

class HTTPDCertificateGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "certificate"

    def write_cert(self, cert, key = False):
        outdir = sys.argv[2]
        if cert.startswith("-----BEGIN CERTIFICATE"):
            filename = os.path.join(outdir, self.p.vhost_name + ".crt")
        elif cert.startswith("-----BEGIN RSA PRIVATE KEY"):
            filename = os.path.join(outdir, self.p.vhost_name + ".key")
        else:
            return cert

        out = open(filename, "w")
        out.write(cert.replace("\\n","\n"))
        out.write("\n")
        out.close()

        return filename

    def handle(self, cfg):
        if not "certificate" in cfg:
            return True

        cfg["certificate"] = self.write_cert(cfg["certificate"])

        self.p.write("SSLEngine On")
        self.p.write("SSLCertificateFile {0}", cfg["certificate"])
        if "certificate_key" in cfg:
            cfg["certificate_key"] = self.write_cert(cfg["certificate_key"])
            self.p.write("SSLCertificateKeyFile {0}", cfg["certificate_key"])
        
        return True

class HTTPDMatchGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "match"

    def write_match(self, regex, cfg):
        enabled_handlers = []

        # If there is "match" in the "location" section, we use
        # LocationMatch in the HTTPDLocationsGenerator, so don't
        # do anything here, skip this if statement and run the
        # directive handlers to handle anything which is in this
        # cfg.
        if not "location" in self.p.nested_sections:
            # If the "match" is *not* in "location" section, do the
            # normal  FilesMatch.
            self.p.write("<FilesMatch \"{0}\">", regex)

            # Run the other handlers for the cfg, but do *not* run the
            # proxy handler. The proxy handler will be executed in the end
            # of this method, because we want it to be outside of
            # Files/FilesMatch block. Why? Because when the proxy handler
            # finds the match directive, it will generate proper ProxyPassMatch
            # with the regex.
            self.p.nested_sections.insert(0, "match")
            if not self.p.run_directive_handlers(cfg, disable = ["proxy"]):
                return False
            self.p.nested_sections.pop(0)

            enabled_handlers = ["proxy"]

            self.p.write("</FilesMatch>")

        # Proxy handler has to somehow find out the regex used by the match
        # option, so we will use the "__regex__" key to pass it. 
        cfg["__regex__"] = regex

        return self.p.run_directive_handlers(cfg, enable = enabled_handlers)

    def handle(self, cfg):
        if not "match" in cfg:
            return True

        # This is set by LocationMatch, so we write just the single
        # match regex configuration from the match directive.
        if "__regex__" in cfg:
            regex = cfg["__regex__"]
            return self.write_match(regex, cfg["match"][regex])

        for regex, match in cfg["match"].items():
            if self.write_match(regex, match) == False:
                return False

        return True


class HTTPDStringGenerator:
    def __init__(self, parent, name, variable):
        self.p = parent
        self.name = name
        self.variable = variable

    def handle(self, cfg):
        if not self.name in cfg:
            return True

        val = expand_variables(cfg[self.name], self.p.app_name)
        if len(val) == 0:
            return True

        self.p.write(self.variable + " {0}", val)
        return True

class HTTPDLocationsGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "locations"

    def write_match_location(self, location, cfg, regex):
        if location[-1] != "/":
            location += "/"
        self.p.write("<LocationMatch \"^{0}(.*{1})\">", location, regex[:-1])
        cfg["__regex__"] = regex

        self.p.nested_sections.insert(0, "location")
        self.p.run_section_handlers(cfg, enable = ["match"])
        self.p.run_directive_handlers(cfg, enable = ["match"])
        self.p.nested_sections.pop(0)

        del cfg["__regex__"]
        self.p.write("</LocationMatch>")
        self.p.write("")

    def write_plain_location(self, location, cfg):
        self.p.write("<Location \"{0}\">", location)

        self.p.nested_sections.insert(0, "location")
        self.p.run_section_handlers(cfg, disable = ["match"])
        self.p.run_directive_handlers(cfg, disable = ["match", "index"])
        self.p.nested_sections.pop(0)

        self.p.write("</Location>")
        self.p.write("")

        if "index" in cfg:
            self.p.write("<Directory \"{0}\">", cfg["alias"])

            self.p.nested_sections.insert(0, "directory")
            self.p.run_directive_handlers(cfg, enable = "index")
            self.p.nested_sections.pop(0)

            self.p.write("</Directory>")
            self.p.write("")

    def write_location(self, location, cfg, regex = None):
        if regex:
            self.write_match_location(location, cfg, regex)
        else:
            self.write_plain_location(location, cfg)

    def handle(self, _cfg):
        if not "locations" in _cfg:
            return True

        for location, cfg in _cfg["locations"].items():
            location = expand_variables(location, self.p.app_name)
            if len(location) == 0:
                continue

            # Check if there is any "match" directive. If it is, we will use
            # LocationMatch instead of Location later for that config.
            # Also check if we have *only* "match" directive there. In that
            # case, we can omit writing normal "Location" later.
            has_match = False
            has_only_match = True
            for option in cfg:
                if option == "match":
                    has_match = True
                else:
                    has_only_match = False

            # In case of "alias" in cfg, generate the "Alias" before
            # the Location section, or generate DocumentRoot in case of 
            # virtualhost and alias == "/".
            if "alias" in cfg:
                alias = expand_variables(cfg["alias"], self.p.app_name)
                if len(alias) != 0:
                    if alias == "/" and "virtualhost" in self.p.nested_sections:
                        self.p.write("DocumentRoot {0}", cfg["alias"])
                    else:
                        self.p.write("Alias {0} \"{1}\"", location, cfg["alias"])

            # In case we have anything else except "match", write it as
            # "Location".
            if not has_only_match:
                self.write_location(location, cfg)

            # Write the LocationMatch configurations.
            if has_match:
                for regex in cfg["match"]:
                    self.write_location(location, cfg, regex)

        return True

class HTTPDGenerator:
    def __init__(self, out):
        self.out = out
        self.app_name = ""
        self.vhost_name = ""
        self.balancers = {}
        self.nested_sections = ["main"]

        # Directive handlers must not call run_directive_handlers
        # or run_section_handlers.
        self.directive_handlers = []
        self.directive_handlers.append(HTTPDProxyGenerator(self))
        self.directive_handlers.append(HTTPDAllowGenerator(self))
        self.directive_handlers.append(HTTPDRedirectsGenerator(self))
        self.directive_handlers.append(HTTPDStringGenerator(self, "index", "DirectoryIndex"))
        self.directive_handlers.append(HTTPDStringGenerator(self, "document_root", "DocumentRoot"))
        self.directive_handlers.append(HTTPDCertificateGenerator(self))
        self.directive_handlers.append(HTTPDBalancersGenerator(self))
        self.directive_handlers.append(HTTPDErrorPagesGenerator(self))

        # Section handlers are supposed to do their stuff and call
        # run_directive_handlers or run_section_handlers
        self.section_handlers = []
        self.section_handlers.append(HTTPDMatchGenerator(self))
        self.section_handlers.append(HTTPDLocationsGenerator(self))

    # Writes the data to output file, expands the variables, uses the proper
    # indentation.
    def write(self, data, *args):
        if len(data) != 0:
            if len(args) == 1:
                args = (expand_variables(args[0], self.app_name),)
                if len(args[0]) == 0:
                    return;
            line = (len(self.nested_sections) - 1) * 4 * " " + data.format(*args)
            line = expand_variables(line, self.app_name)
            self.out.write(line)
        self.out.write("\n")

    # Runs the handlers from the list "lst" with config "cfg".
    # When enable/disable list is set, only enabled and not disabled handler
    # (based on their names) will be run.
    def run_handlers(self, lst, cfg, enable, disable):
        for handler in lst:
            if len(disable) != 0 and handler.name in disable:
                continue
            if len(enable) != 0 and not handler.name in enable:
                continue
            if not handler.handle(cfg):
                return False
        return True

    def run_directive_handlers(self, cfg, enable = [], disable = []):
        return self.run_handlers(self.directive_handlers, cfg, enable, disable)

    def run_section_handlers(self, cfg, enable = [], disable = []):
        return self.run_handlers(self.section_handlers, cfg, enable, disable)

    def write_app_config(self, app_cfg, enable = [], disable = []):
        self.app_name = app_cfg["__name__"]
        self.run_directive_handlers(app_cfg, enable, disable)
        self.run_section_handlers(app_cfg, enable, disable)

    # Merges balancers from multiple webconf-spec configs into the single one.
    def merge_balancers(self, vhost_cfg):
        # Function used to update the python dicts/sub-dicts
        def update(d, u):
            for k, v in u.iteritems():
                if isinstance(v, collections.Mapping):
                    r = update(d.get(k, {}), v)
                    d[k] = r
                else:
                    d[k] = u[k]
            return d

        balancers = {}  # merged balancers config
        members = {}    # balancer_name:[member1, member2, ...]
        for app_cfg in vhost_cfg:
            if not "balancers" in app_cfg:
                continue

            # Update the balancers config
            balancers = update(balancers, app_cfg["balancers"])

            # Get the list of balancer members and store it into `members`
            for balancer, cfg in app_cfg["balancers"].items():
                if not balancer in members:
                    members[balancer] = []
                members[balancer] += cfg["members"]

        # If this vhost does not have any balancer, so end up here...
        if len(balancers) == 0:
            return

        # Pair up balancers with members
        for balancer in balancers:
            members[balancer].sort()
            balancers[balancer]["members"] = members[balancer]

        # Set the merged balancers config to first app_cfg and remove all
        # partial balancers configs.
        vhost_cfg[0]["balancers"] = balancers
        for app_cfg in vhost_cfg[1:]:
            if "balancers" in app_cfg:
                del app_cfg["balancers"]

    def write_vhost_config(self, vhost, vhost_cfg, ssl = False):
        self.vhost_name = vhost
        self.merge_balancers(vhost_cfg)

        if not ssl:
            enable_ssl = False
            only_redirect = False
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                global listen_9090_set
                if not listen_9090_set:
                    self.write("Listen 9090")
                    listen_9090_set = True
                self.write("<VirtualHost *:9090>")
            else:
                self.write("<VirtualHost *:80>")

            self.nested_sections.insert(0, "virtualhost")
            self.write("ServerName {0}", vhost)

            # Check if there is "certificate" set for some app within this
            # vhost. If yes, set enable_ssl to True.
            for app_cfg in vhost_cfg:
                if "certificate" in app_cfg and len(expand_variables(app_cfg["certificate"], app_cfg["__name__"])) != 0:
                    enable_ssl = True

            # Check if we are only redirecting HTTP to HTTPS. If so,
            # Run the "redirects" handler and set only_redirect to True.
            for app_cfg in vhost_cfg:
                self.app_name = app_cfg["__name__"]
                # We are not supporting multiple redirects options, but this is
                # OK. If there is redirection for "/", it is invalid to add
                # any extra redirection.
                if "redirects" in app_cfg and app_cfg["redirects"].items()[0][0] == "/" and enable_ssl:
                    self.run_directive_handlers(app_cfg, "redirects")
                    only_redirect = True


            # If we are *not* only redirecting, generate the web-app
            # configuration, but skip "certificate" handlers. We will
            # handle them only when generating HTTPS config.
            if not only_redirect:
                for app_cfg in vhost_cfg:
                    self.write_app_config(app_cfg, disable = ["certificate"])
            self.nested_sections.pop(0)

            self.write("</VirtualHost>")
            self.write("")

            # Finally, when SSL is enabled, we have to generate also
            # SSL-enabled vhost.
            if enable_ssl:
                self.write_vhost_config(vhost, vhost_cfg, True)
        else:
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                global listen_9443_set
                if not listen_9443_set:
                    self.write("Listen 9443 ssl")
                    listen_9443_set = True
                self.write("<VirtualHost *:9443>")
            else:
                self.write("<VirtualHost *:443>")

            self.nested_sections.insert(0, "virtualhost")
            self.write("ServerName {0}", vhost)

            # Handle "redirects" explicitely, because we have to ignore
            # redirect to ourselves.
            for app_cfg in vhost_cfg:
                self.app_name = app_cfg["__name__"]
                # We are not supporting multiple redirects options, but this is
                # OK. If there is redirection for "/", it is invalid to add
                # any extra redirection.
                if "redirects" in app_cfg and app_cfg["redirects"].items()[0][00] != "/":
                    self.run_directive_handlers(app_cfg, "redirects")

            for app_cfg in vhost_cfg:
                self.write_app_config(app_cfg, disable = ["redirects"])
            self.nested_sections.pop(0)

            self.write("</VirtualHost>")
            self.write("")

def generate_config(inp, outp):
    cfgs = {}

    # Load multiple configs from directory or single JSON file.
    if os.path.isdir(inp):
        for f in os.listdir(inp):
            if f.endswith(".json"):
                f = open(inp + "/" + f, "r")
                c = json.load(f)
                f.close()
                cfgs = load_config(cfgs, c)
    else:
        f = open(inp, "r")
        cfgs = json.load(f)
        f.close()

    # Get webapps wihout and with vhost.
    webapps_per_vhost, webapps_without_vhost = get_webapps_per_vhost(cfgs)

    # Generate the config files for webapps with vhost.
    for vhost, vhost_cfg in webapps_per_vhost.items():
        out = open(os.path.join(outp, vhost + ".conf"), "w")
        generator = HTTPDGenerator(out)
        generator.write_vhost_config(vhost, vhost_cfg)
        out.close()

    # Generate the config files for webapps without vhost.
    for app_cfg in webapps_without_vhost:
        out = open(os.path.join(outp, app_cfg["__name__"] + ".conf"), "w")
        generator = HTTPDGenerator(out)
        generator.write_app_config(app_cfg)
        out.close()

    return 0

def main():
    if len(sys.argv) < 3:
        print_help()
        return 1

    return generate_config(sys.argv[1], sys.argv[2])

sys.exit(main())
